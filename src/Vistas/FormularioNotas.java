/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import AccesoADatos.AlumnoData;
import AccesoADatos.InscripcionData;
import Entidades.Alumno;
import Entidades.Materia;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nstut
 */
public class FormularioNotas extends javax.swing.JInternalFrame {
    private DefaultTableModel modelo = new DefaultTableModel();

    /**
     * Creates new form FormularioNotas
     */
    public FormularioNotas() {
        initComponents();
        agregarItems ();
        armarCabecera();
        vaciarTabla();
        mostrarNota();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcAlumnos = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaNotas = new javax.swing.JTable();
        jbGuardar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        jLabel1.setText("Carga de notas");

        jLabel2.setText("Seleccione alumno:");

        jcAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcAlumnosActionPerformed(evt);
            }
        });

        jtTablaNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtTablaNotas.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtTablaNotasPropertyChange(evt);
            }
        });
        jtTablaNotas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtTablaNotasKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jtTablaNotas);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(147, 147, 147))
        );

        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(147, 147, 147)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jcAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 62, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jbGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSalir)
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalir)
                    .addComponent(jbGuardar))
                .addGap(0, 25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcAlumnosActionPerformed
        vaciarTabla(); 
        mostrarNota();
         
    }//GEN-LAST:event_jcAlumnosActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        InscripcionData insc = new InscripcionData();
        int fila = jtTablaNotas.getSelectedRow();
        int colum = jtTablaNotas.getSelectedColumn();
        
        int nuevaNota = (int)jtTablaNotas.getValueAt(fila, colum);
        int idMat = (int)jtTablaNotas.getValueAt(fila, 0);
        JOptionPane.showMessageDialog(null,nuevaNota);
        JOptionPane.showMessageDialog(null,idMat);
        
        Alumno alum = new Alumno();
        alum =(Alumno) jcAlumnos.getSelectedItem();
        
        insc.actualizarNota( nuevaNota,alum.getIdAlumno(), idMat);
        
        vaciarTabla();
        mostrarNota();
        
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jtTablaNotasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtTablaNotasKeyReleased
        
    }//GEN-LAST:event_jtTablaNotasKeyReleased

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jtTablaNotasPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtTablaNotasPropertyChange
        int fila = jtTablaNotas.getSelectedRow();
        int colum = jtTablaNotas.getSelectedColumn();
        
        int valor = (int)jtTablaNotas.getValueAt(fila, colum);
        JOptionPane.showMessageDialog(null,valor);
    }//GEN-LAST:event_jtTablaNotasPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcAlumnos;
    private javax.swing.JTable jtTablaNotas;
    // End of variables declaration//GEN-END:variables
    public void agregarItems (){
            AlumnoData alumData = new AlumnoData();
            List<Alumno> listaAlumnos = alumData.listarAlumnos();
            for (Alumno aux :listaAlumnos){
                jcAlumnos.addItem(aux);
            }
    }
    
    private void armarCabecera(){
        modelo.addColumn("Codigo");
        modelo.addColumn("Nombre");
        modelo.addColumn("Nota");
        jtTablaNotas.setModel(modelo);
    
    }
    private void vaciarTabla () {
        for (int i = modelo.getRowCount()-1; i >=0;i--){
            modelo.removeRow(i);
        }
    }
    
    private void mostrarNota () {
        InscripcionData insc = new InscripcionData();
        Alumno alumnoSelec = (Alumno)jcAlumnos.getSelectedItem();
        
        List <Materia> listaInscriptas = insc.obtenerMateriasCursadas( alumnoSelec.getIdAlumno());
        /*int[] notas = new int[listaInscriptas.size()-1];*/
        
        /*int i=0;*/
        /*for (Materia aux : listaInscriptas) {
            int idMat = aux.getIdMateria();
            notas[i]= insc.obtenerNotaPorAlumno(alumnoSelec.getIdAlumno(),idMat);
            i++;
        }*/
        for (Materia aux : listaInscriptas){
            int nota = insc.obtenerNotaPorAlumno(alumnoSelec.getIdAlumno(),aux.getIdMateria());
            modelo.addRow(new Object[]{aux.getIdMateria(),aux.getNombre(),nota});
        }
    }
}
